'''
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

'''



import time 
import math

start = time.time()

n = 1
a = 1 
c = 0 
def triangular_number(n):
    tri_num = 0 
    while n > 0:
        tri_num = tri_num + n 
        n-=1
    return tri_num

def number_of_devisors(n):
    
    num = n
    i = 1
    num_devisors = 0
    while i <= num and num_devisors <= 500:

        if num % i == 0:    
            num_devisors +=1
    
        i += 1
    return num_devisors
    
while c <= 500:
    b = triangular_number(a)
    c = number_of_devisors(b)
    if c == 500:
        break

    print(b)
    a+=1 

# print(b,c)

elapsed = time.time() - start
print(b,c, elapsed)