'''
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

'''



import time 
import math

start = time.time()
index = 1
number_of_prime = 0 
last_prime = 0 


def triangular_number(n):
    tri_num = 0 
    while n > 0:
        tri_num = tri_num + n 
        n-=1
    return tri_num

#def number_of_devisors(n):

def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def multiplyList(myList) : 
      
    # Multiply elements one by one 
    result = 1
    for x in myList: 
         result = result * x  
    return result  
      
for index in range(100000):
    # expont_of_current_prime = 0
    # expoent_of_previous_prime = 1 
    # number_of_devisors = 0
    prime_exponents = []

    tri_num = triangular_number(index) #finds the triangular number and stores it in tri_number
    prime__factors = prime_factors(tri_num) # finds the prime factors and sotes it in prime__factors
    
    ''' need to see the exponets of each prime in order to get the nmber of devisors'''
    
    for prime in prime__factors:
        if prime != last_prime:
            number_of_prime = prime__factors.count(prime)
            
            expont_of_current_prime = number_of_prime + 1 
            prime_exponents.append(expont_of_current_prime)
            # number_of_devisors = expont_of_current_prime * expoent_of_previous_prime  
            # expoent_of_previous_prime = expont_of_current_prime 
        last_prime = prime 
     
    i = multiplyList(prime_exponents)
    if i >= 500:
        break

    #print(tri_num, prime__factors,prime_exponents)
elapsed = time.time() - start
print(tri_num, elapsed)

